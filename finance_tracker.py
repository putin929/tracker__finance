#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢—Ä–µ–∫–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤
–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import json
import datetime
from collections import defaultdict
import os

class FinanceTracker:
    def __init__(self, data_file="finances.json"):
        self.data_file = data_file
        self.transactions = []
        self.categories = {
            'income': ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–§—Ä–∏–ª–∞–Ω—Å', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ü–æ–¥–∞—Ä–∫–∏', '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã'],
            'expense': ['–ï–¥–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '–ó–¥–æ—Ä–æ–≤—å–µ', 
                       '–û–¥–µ–∂–¥–∞', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã']
        }
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.transactions = data.get('transactions', [])
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫
                    for transaction in self.transactions:
                        transaction['date'] = datetime.datetime.strptime(
                            transaction['date'], '%Y-%m-%d'
                        ).date()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.transactions = []
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            transactions_to_save = []
            for transaction in self.transactions:
                trans_copy = transaction.copy()
                trans_copy['date'] = transaction['date'].strftime('%Y-%m-%d')
                transactions_to_save.append(trans_copy)
            
            data = {
                'transactions': transactions_to_save
            }
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_transaction(self, amount, category, description, transaction_type, date=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        
        Args:
            amount (float): –°—É–º–º–∞
            category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ
            transaction_type (str): 'income' –∏–ª–∏ 'expense'
            date (datetime.date): –î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        if date is None:
            date = datetime.date.today()
        
        transaction = {
            'id': len(self.transactions) + 1,
            'date': date,
            'amount': abs(amount),  # –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            'category': category,
            'description': description,
            'type': transaction_type
        }
        
        self.transactions.append(transaction)
        self.save_data()
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {transaction_type} {amount} —Ä—É–±. - {description}")
    
    def get_transactions(self, days=30, transaction_type=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            transaction_type (str): –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
            
        Returns:
            list: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        cutoff_date = datetime.date.today() - datetime.timedelta(days=days)
        
        filtered = [
            t for t in self.transactions 
            if t['date'] >= cutoff_date
        ]
        
        if transaction_type:
            filtered = [t for t in filtered if t['type'] == transaction_type]
        
        return sorted(filtered, key=lambda x: x['date'], reverse=True)
    
    def get_balance(self, days=30):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        transactions = self.get_transactions(days)
        income = sum(t['amount'] for t in transactions if t['type'] == 'income')
        expenses = sum(t['amount'] for t in transactions if t['type'] == 'expense')
        return income - expenses
    
    def get_category_summary(self, days=30):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        transactions = self.get_transactions(days)
        
        income_by_category = defaultdict(float)
        expense_by_category = defaultdict(float)
        
        for transaction in transactions:
            if transaction['type'] == 'income':
                income_by_category[transaction['category']] += transaction['amount']
            else:
                expense_by_category[transaction['category']] += transaction['amount']
        
        return dict(income_by_category), dict(expense_by_category)
    
    def display_transactions(self, days=30, limit=10):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        transactions = self.get_transactions(days)[:limit]
        
        if not transactions:
            print("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {days} –¥–Ω–µ–π:")
        print("-" * 80)
        print(f"{'–î–∞—Ç–∞':<12} {'–¢–∏–ø':<8} {'–°—É–º–º–∞':<12} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<15} {'–û–ø–∏—Å–∞–Ω–∏–µ'}")
        print("-" * 80)
        
        for t in transactions:
            amount_str = f"{t['amount']:,.0f} —Ä—É–±."
            type_icon = "üí∞" if t['type'] == 'income' else "üí∏"
            print(f"{t['date']!s:<12} {type_icon:<8} {amount_str:<12} {t['category']:<15} {t['description'][:25]}")
    
    def display_summary(self, days=30):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        income_summary, expense_summary = self.get_category_summary(days)
        balance = self.get_balance(days)
        
        total_income = sum(income_summary.values())
        total_expenses = sum(expense_summary.values())
        
        print(f"\nüìä –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê –∑–∞ {days} –¥–Ω–µ–π")
        print("=" * 50)
        
        print(f"\nüí∞ –î–û–•–û–î–´: {total_income:,.0f} —Ä—É–±.")
        for category, amount in sorted(income_summary.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total_income * 100) if total_income > 0 else 0
            print(f"  ‚Ä¢ {category}: {amount:,.0f} —Ä—É–±. ({percentage:.1f}%)")
        
        print(f"\nüí∏ –†–ê–°–•–û–î–´: {total_expenses:,.0f} —Ä—É–±.")
        for category, amount in sorted(expense_summary.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total_expenses * 100) if total_expenses > 0 else 0
            print(f"  ‚Ä¢ {category}: {amount:,.0f} —Ä—É–±. ({percentage:.1f}%)")
        
        print(f"\nüè¶ –ë–ê–õ–ê–ù–°: {balance:,.0f} —Ä—É–±.")
        
        if balance > 0:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –≤ –ø–ª—é—Å–µ.")
        elif balance < 0:
            print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã.")
        else:
            print("üîÑ –í—ã –Ω–∞ –Ω—É–ª–µ.")

def main():
    tracker = FinanceTracker()
    
    print("=== –¢–†–ï–ö–ï–† –§–ò–ù–ê–ù–°–û–í ===\n")
    
    while True:
        print("1. –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
        print("2. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print("4. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("6. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")
        
        if choice == "1" or choice == "2":
            transaction_type = 'income' if choice == "1" else 'expense'
            type_name = '–¥–æ—Ö–æ–¥' if choice == "1" else '—Ä–∞—Å—Ö–æ–¥'
            categories = tracker.categories[transaction_type]
            
            try:
                # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                print(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {type_name}:")
                for i, cat in enumerate(categories, 1):
                    print(f"{i}. {cat}")
                
                cat_choice = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-{len(categories)}): ")) - 1
                if not (0 <= cat_choice < len(categories)):
                    print("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                    continue
                
                category = categories[cat_choice]
                amount = float(input(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {type_name}: "))
                description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ") or f"{type_name.capitalize()} - {category}"
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–∞—Ç–∞
                date_input = input("–î–∞—Ç–∞ (YYYY-MM-DD) –∏–ª–∏ Enter –¥–ª—è —Å–µ–≥–æ–¥–Ω—è: ")
                date = None
                if date_input:
                    try:
                        date = datetime.datetime.strptime(date_input, '%Y-%m-%d').date()
                    except ValueError:
                        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞")
                
                tracker.add_transaction(amount, category, description, transaction_type, date)
                
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
        elif choice == "3":
            try:
                days = int(input("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ") or "30")
                limit = int(input("–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or "10")
                tracker.display_transactions(days, limit)
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                
        elif choice == "4":
            try:
                days = int(input("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ") or "30")
                tracker.display_summary(days)
            except ValueError:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                
        elif choice == "5":
            print("\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò:")
            print("\nüí∞ –î–æ—Ö–æ–¥—ã:")
            for cat in tracker.categories['income']:
                print(f"  ‚Ä¢ {cat}")
            print("\nüí∏ –†–∞—Å—Ö–æ–¥—ã:")
            for cat in tracker.categories['expense']:
                print(f"  ‚Ä¢ {cat}")
                
        elif choice == "6":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üí∞")
            break
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    main()
